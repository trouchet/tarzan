"""
Custom Exception Handler Module for Django REST framework

This module defines a custom exception handler for Django REST framework (DRF). The custom
exception handler is designed to be used as the `EXCEPTION_HANDLER` setting in the
DRF settings, allowing developers to customize the error response generated by the
framework's default exception handler.

Attributes:
    (No module-level attributes)

Functions:
    custom_exception_handler(exc, context): Customizes the error response generated by the
        DRF default exception handler. It adds an additional 'status_code' field to the
        error response.

Description:
    Django REST framework provides a default exception handler that generates error
    responses for various exceptions. This module provides a way to customize the
    error responses by adding extra information, such as the HTTP status code, to the
    response data.

Usage:
    To use this custom exception handler, you need to specify it in your Django settings.
    Add the following configuration to your Django project's settings:

    ```python
    REST_FRAMEWORK = {
        'EXCEPTION_HANDLER': 'your_app_name.module.custom_exception_handler',
    }
    ```

    Replace `'your_app_name.module'` with the actual Python module path to the
    `custom_exception_handler` function within your application.

    Once configured, the custom exception handler will be used to generate error responses
    for exceptions raised in your DRF views.

Example:
    Here's an example of how to configure the custom exception handler in your Django
    project's settings:

    ```python
    # settings.py

    REST_FRAMEWORK = {
        'EXCEPTION_HANDLER': 'src.exceptions.custom_exception_handler',
    }
    ```

    With this configuration, the `custom_exception_handler` function defined in this module
    will be responsible for customizing the error responses in your DRF views.
"""
from rest_framework.views import exception_handler


def custom_exception_handler(exc, context):
    """
    Custom exception handler for REST framework.

    This function is designed to be used as the `EXCEPTION_HANDLER` setting
    in Django REST framework settings. It customizes the error response generated
    by the framework's default exception handler.

    Args:
        exc (Exception): The raised exception.
        context (dict): Context information for the exception.

    Returns:
        Response or None: A customized error response with additional status_code
        data field, or None if the response is not provided by the default handler.

    Example:
        To use this custom exception handler, add the following to your Django settings:

        ```
        REST_FRAMEWORK = {
            'EXCEPTION_HANDLER': 'your_app_name.module.custom_exception_handler',
        }
        ```

    """
    response = exception_handler(exc, context)

    if response is not None:
        # Customize the error response here if needed
        response.data["status_code"] = response.status_code

    return response
